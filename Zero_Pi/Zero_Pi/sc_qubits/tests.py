# tests.py
# meant to be run with 'nose'

from __future__ import division
from __future__ import print_function

import numpy as np
import os

import sc_qubits2 as qubit  # import the superconducting circuit module
import config as globals

def transmon_initialize():
    CPB = qubit.Transmon(
        EJ=30.02,
        EC=1.2,
        ng=0.3,
        ncut=31
    )
    return CPB


def fluxonium_initialize():
    fluxonium = qubit.Fluxonium(
        EJ=8.9,
        EC=2.5,
        EL=0.5,
        flux=0.33,
        cutoff=110
    )
    return fluxonium


def test_CPB_eigenvals():
    CPB = transmon_initialize()
    evals_reference = np.asarray([-21.84381856, -6.17518551, 8.01366695, 20.04897106, 30.54312385, 38.7071573])
    assert np.allclose(evals_reference, CPB.eigenvals())


def test_CPB_eigenvecs():
    CPB = transmon_initialize()
    evecs_reference = np.asarray([2.82596779e-50, 4.02326328e-50, 5.90227556e-49,
                                  1.74550401e-46, 4.44702148e-44, 1.05392044e-41,
                                  2.31708003e-39, 4.71183050e-37, 8.83422455e-35,
                                  1.52185437e-32, 2.39974016e-30, 3.44943517e-28,
                                  4.49938396e-26, 5.29910511e-24, 5.60376158e-22,
                                  5.28792405e-20, 4.42164853e-18, 3.25040810e-16,
                                  2.08168790e-14, 1.14941994e-12, 5.40534586e-11,
                                  2.13384706e-09, 6.94890358e-08, 1.82700196e-06,
                                  3.77392307e-05, 5.90895221e-04, 6.67283966e-03,
                                  5.04370027e-02, 2.24184912e-01, 4.30836609e-01,
                                  -7.08223225e-02, -3.74513890e-01, 5.60284557e-01,
                                  -2.86068361e-01, -4.42560641e-01, -1.54517678e-01,
                                  -2.75089946e-02, -3.06437898e-03, -2.36400812e-04,
                                  -1.34466417e-05, -5.88883142e-07, -2.05009563e-08,
                                  -5.81536100e-10, -1.37090080e-11, -2.72948277e-13,
                                  -4.65223780e-15, -6.86635442e-17, -8.86242417e-19,
                                  -1.00893360e-20, -1.02076167e-22, -9.23913413e-25,
                                  -7.52599339e-27, -5.54674578e-29, -3.71659725e-31,
                                  -2.27396000e-33, -1.27549790e-35, -6.58293426e-38,
                                  -3.13658463e-40, -1.38399278e-42, -5.67135306e-45,
                                  -2.16194662e-47, -5.65089988e-50, -1.01063092e-50])
    _, evecs_tst = CPB.eigensys()
    evecs_calculated = evecs_tst.T[3]
    assert np.allclose(evecs_reference, evecs_tst.T[3])


def test_CPB_plot_evals_vs_paramvals_ng():
    CPB = transmon_initialize()
    ng_list = np.linspace(-1, 1, 100)
    CPB.plot_evals_vs_paramvals('ng', ng_list, evals_count=5, subtract_ground=True)


def test_CPB_get_spectrum_vs_paramvals():
    CPB = transmon_initialize()
    reference_evals = np.asarray([[-21.84390814, -6.17107609, 7.93584546, 20.84011423],
                                 [-21.84389934, -6.1714804, 7.94338947, 20.75062548],
                                 [-21.84387519, -6.1725889, 7.96419673, 20.52074986],
                                 [-21.8438419, -6.17411552, 7.99315565, 20.23390761],
                                 [-21.84380806, -6.17566697, 8.02295507, 19.9693665],
                                 [-21.84378236, -6.17684428, 8.04582426, 19.78288924],
                                 [-21.84377142, -6.17734523, 8.05562357, 19.70671318],
                                 [-21.84377805, -6.17704135, 8.04967422, 19.75271143],
                                 [-21.84380056, -6.17601055, 8.02960601, 19.91379499],
                                 [-21.84383314, -6.17451738, 8.00083801, 20.16307018],
                                 [-21.84386741, -6.17294561, 7.97093158, 20.45095148],
                                 [-21.84389455, -6.17170001, 7.94749717, 20.70337314],
                                 [-21.84390758, -6.17110189, 7.93632611, 20.83430272],
                                 [-21.84390314, -6.17130573, 7.94012724, 20.78887809],
                                 [-21.84388238, -6.17225886, 7.95798254, 20.58703504],
                                 [-21.84385063, -6.17371525, 7.98552832, 20.30626506],
                                 [-21.84381608, -6.17529951, 8.01586288, 20.02993252],
                                 [-21.8437876, -6.17660407, 8.04113987, 19.82005885],
                                 [-21.84377254, -6.17729388, 8.05461729, 19.71444025],
                                 [-21.84377476, -6.17719203, 8.05262247, 19.72982167],
                                 [-21.8437937, -6.17632463, 8.03570247, 19.86384589],
                                 [-21.84382448, -6.17491421, 8.00844917, 20.09477273],
                                 [-21.84385918, -6.17332313, 7.97808023, 20.37902002],
                                 [-21.84388887, -6.17196093, 7.95238686, 20.64838448],
                                 [-21.8439059, -6.17117886, 7.93776068, 20.81704842],
                                 [-21.8439059, -6.17117886, 7.93776068, 20.81704842],
                                 [-21.84388887, -6.17196093, 7.95238686, 20.64838448],
                                 [-21.84385918, -6.17332313, 7.97808023, 20.37902002],
                                 [-21.84382448, -6.17491421, 8.00844917, 20.09477273],
                                 [-21.8437937, -6.17632463, 8.03570247, 19.86384589],
                                 [-21.84377476, -6.17719203, 8.05262247, 19.72982167],
                                 [-21.84377254, -6.17729388, 8.05461729, 19.71444025],
                                 [-21.8437876, -6.17660407, 8.04113987, 19.82005885],
                                 [-21.84381608, -6.17529951, 8.01586288, 20.02993252],
                                 [-21.84385063, -6.17371525, 7.98552832, 20.30626506],
                                 [-21.84388238, -6.17225886, 7.95798254, 20.58703504],
                                 [-21.84390314, -6.17130573, 7.94012724, 20.78887809],
                                 [-21.84390758, -6.17110189, 7.93632611, 20.83430272],
                                 [-21.84389455, -6.17170001, 7.94749717, 20.70337314],
                                 [-21.84386741, -6.17294561, 7.97093158, 20.45095148],
                                 [-21.84383314, -6.17451738, 8.00083801, 20.16307018],
                                 [-21.84380056, -6.17601055, 8.02960601, 19.91379499],
                                 [-21.84377805, -6.17704135, 8.04967422, 19.75271143],
                                 [-21.84377142, -6.17734523, 8.05562357, 19.70671318],
                                 [-21.84378236, -6.17684428, 8.04582426, 19.78288924],
                                 [-21.84380806, -6.17566697, 8.02295507, 19.9693665],
                                 [-21.8438419, -6.17411552, 7.99315565, 20.23390761],
                                 [-21.84387519, -6.1725889, 7.96419673, 20.52074986],
                                 [-21.84389934, -6.1714804, 7.94338947, 20.75062548],
                                 [-21.84390814, -6.17107609, 7.93584546, 20.84011423]])
    ng_list = np.linspace(-2, 2, 50)
    calculated_evals = CPB.get_spectrum_vs_paramvals('ng', ng_list, evals_count=4, subtract_ground=False,
                                                    get_eigenstates=True)
    assert np.allclose(reference_evals, calculated_evals.energy_table)

def test_CPB_get_spectrum_vs_paramvals_filewrite():
    CPB = transmon_initialize()
    ng_list = np.linspace(-2, 2, 50)
    calculated_evals = CPB.get_spectrum_vs_paramvals('ng', ng_list, evals_count=4, subtract_ground=False,
                                                     get_eigenstates=True, filename='./tst_tmp')
    if globals.FILE_FORMAT is 'h5':
        os.remove('./tst_tmp.hdf5')
    else:
        os.remove('./tst_tmp_ng.csv')
        os.remove('./tst_tmp_energies.csv')
        os.remove('./tst_tmp_states.csv')
        os.remove('./tst_tmp.prm')

def test_CPB_plot_evals_vs_paramvals_EJ():
    CPB = transmon_initialize()
    CPB.ng = 0.3
    ej_vals = CPB.EJ * np.cos(np.linspace(-np.pi / 2, np.pi / 2, 40))
    CPB.plot_evals_vs_paramvals('EJ', ej_vals, evals_count=4, subtract_ground=False)


def test_CPB_plot_n_wavefunction():
    CPB = transmon_initialize()
    CPB.plot_n_wavefunction(esys=None, which=1, mode='real')


def test_CPB_plot_phi_wavefunction():
    CPB = transmon_initialize()
    CPB.plot_phi_wavefunction(esys=None, which=6, mode='real')
    CPB.plot_phi_wavefunction(esys=None, which=(0,3,9), mode='abs_sqr')


def test_CPB_matrixelement_table():
    reference_matrix = np.asarray([[2.99957402e-01 - 0.j, -9.02867276e-01 - 0.j, -1.26536183e-03 - 0.j,
                                    -5.03117823e-02 - 0.j, 7.05431423e-03 - 0.j, 7.08892467e-03 - 0.j,
                                    -1.88275461e-03 - 0.j, 6.92384041e-04 - 0.j, -1.25520380e-04 - 0.j,
                                    3.61049140e-05 - 0.j, -4.84901263e-06 - 0.j, 1.17090131e-06 - 0.j,
                                    -1.24373020e-07 - 0.j, 2.60676660e-08 - 0.j, -2.27939079e-09 - 0.j,
                                    4.23871754e-10 - 0.j],
                                   [-9.02867276e-01 + 0.j, 3.01952308e-01 - 0.j, -1.21191324e+00 - 0.j,
                                    2.52010582e-02 - 0.j, 1.09441111e-01 - 0.j, -3.89271656e-02 - 0.j,
                                    -1.29141530e-02 - 0.j, -4.68151630e-03 - 0.j, -8.49521778e-04 - 0.j,
                                    -2.44502684e-04 - 0.j, -3.28166805e-05 - 0.j, -7.92937645e-06 - 0.j,
                                    -8.41719700e-07 - 0.j, -1.76530964e-07 - 0.j, -1.54262406e-08 - 0.j,
                                    -2.87047138e-09 - 0.j],
                                   [-1.26536183e-03 + 0.j, -1.21191324e+00 + 0.j, 2.62410987e-01 - 0.j,
                                    -1.36957066e+00 - 0.j, 2.10165386e-01 - 0.j, 2.08836909e-01 - 0.j,
                                    -5.63017337e-02 - 0.j, 2.04290273e-02 - 0.j, -3.75388991e-03 - 0.j,
                                    1.06529896e-03 - 0.j, -1.45017606e-04 - 0.j, 3.45482051e-05 - 0.j,
                                    -3.71957736e-06 - 0.j, 7.69143445e-07 - 0.j, -6.81688872e-08 - 0.j,
                                    1.25066119e-08 - 0.j],
                                   [-5.03117823e-02 + 0.j, 2.52010582e-02 + 0.j, -1.36957066e+00 + 0.j,
                                    6.27078975e-01 - 0.j, 1.20862842e+00 - 0.j, -5.34406599e-01 - 0.j,
                                    -1.55118315e-01 - 0.j, -6.52284685e-02 - 0.j, -1.02134587e-02 - 0.j,
                                    -3.40712566e-03 - 0.j, -3.94542934e-04 - 0.j, -1.10495266e-04 - 0.j,
                                    -1.01196878e-05 - 0.j, -2.45994573e-06 - 0.j, -1.85464043e-07 - 0.j,
                                    -3.99998033e-08 - 0.j],
                                   [7.05431423e-03 + 0.j, 1.09441111e-01 + 0.j, 2.10165386e-01 + 0.j,
                                    1.20862842e+00 + 0.j, -1.14248443e+00 - 0.j, -7.63430508e-01 - 0.j,
                                    5.47221026e-01 - 0.j, -7.98063904e-02 - 0.j, 3.68574665e-02 - 0.j,
                                    -4.16354056e-03 - 0.j, 1.42389904e-03 - 0.j, -1.35025940e-04 - 0.j,
                                    3.65217921e-05 - 0.j, -3.00606983e-06 - 0.j, 6.69336777e-07 - 0.j,
                                    -4.88800223e-08 - 0.j],
                                   [7.08892467e-03 + 0.j, -3.89271656e-02 + 0.j, 2.08836909e-01 + 0.j,
                                    -5.34406599e-01 + 0.j, -7.63430508e-01 + 0.j, 2.56565968e+00 - 0.j,
                                    1.41343797e-01 - 0.j, 4.90119761e-01 - 0.j, 9.35398266e-03 - 0.j,
                                    2.57687455e-02 - 0.j, 3.61347596e-04 - 0.j, 8.35708471e-04 - 0.j,
                                    9.26825603e-06 - 0.j, 1.86052995e-05 - 0.j, 1.69859809e-07 - 0.j,
                                    3.02530381e-07 - 0.j],
                                   [-1.88275461e-03 + 0.j, -1.29141530e-02 + 0.j, -5.63017337e-02 + 0.j,
                                    -1.55118315e-01 + 0.j, 5.47221026e-01 + 0.j, 1.41343797e-01 + 0.j,
                                    -2.83977257e+00 - 0.j, 1.53918804e-02 - 0.j, -4.14516367e-01 - 0.j,
                                    8.03244216e-04 - 0.j, -1.60649547e-02 - 0.j, 2.60496741e-05 - 0.j,
                                    -4.12053923e-04 - 0.j, 5.79941448e-07 - 0.j, -7.55173363e-06 - 0.j,
                                    9.43010391e-09 - 0.j],
                                   [6.92384041e-04 + 0.j, -4.68151630e-03 + 0.j, 2.04290273e-02 + 0.j,
                                    -6.52284685e-02 + 0.j, -7.98063904e-02 + 0.j, 4.90119761e-01 + 0.j,
                                    1.53918804e-02 + 0.j, 3.89324992e+00 - 0.j, 1.01932534e-03 - 0.j,
                                    3.74250819e-01 - 0.j, 3.93769807e-05 - 0.j, 1.21626869e-02 - 0.j,
                                    1.00998580e-06 - 0.j, 2.70777248e-04 - 0.j, 1.85100621e-08 - 0.j,
                                    4.40295756e-06 - 0.j],
                                   [-1.25520380e-04 + 0.j, -8.49521778e-04 + 0.j, -3.75388991e-03 + 0.j,
                                    -1.02134587e-02 + 0.j, 3.68574665e-02 + 0.j, 9.35398266e-03 + 0.j,
                                    -4.14516367e-01 + 0.j, 1.01932534e-03 + 0.j, -3.93476982e+00 - 0.j,
                                    5.31950251e-05 - 0.j, -3.26789838e-01 - 0.j, 1.72514542e-06 - 0.j,
                                    -8.39193226e-03 - 0.j, 3.84067505e-08 - 0.j, -1.53799479e-04 - 0.j,
                                    6.24510715e-10 - 0.j],
                                   [3.61049140e-05 + 0.j, -2.44502684e-04 + 0.j, 1.06529896e-03 + 0.j,
                                    -3.40712566e-03 + 0.j, -4.16354056e-03 + 0.j, 2.57687455e-02 + 0.j,
                                    8.03244216e-04 + 0.j, 3.74250819e-01 + 0.j, 5.31950251e-05 + 0.j,
                                    4.95077789e+00 - 0.j, 2.05494696e-06 - 0.j, 3.01394958e-01 - 0.j,
                                    5.27076278e-08 - 0.j, 6.71571077e-03 - 0.j, 9.65975427e-10 - 0.j,
                                    1.09200461e-04 - 0.j],
                                   [-4.84901263e-06 + 0.j, -3.28166805e-05 + 0.j, -1.45017606e-04 + 0.j,
                                    -3.94542934e-04 + 0.j, 1.42389904e-03 + 0.j, 3.61347596e-04 + 0.j,
                                    -1.60649547e-02 + 0.j, 3.93769807e-05 + 0.j, -3.26789838e-01 + 0.j,
                                    2.05494696e-06 + 0.j, -4.96613473e+00 - 0.j, 6.66431180e-08 - 0.j,
                                    -2.69994737e-01 - 0.j, 1.48366948e-09 - 0.j, -4.95093648e-03 - 0.j,
                                    2.41251206e-11 - 0.j],
                                   [1.17090131e-06 + 0.j, -7.92937645e-06 + 0.j, 3.45482051e-05 + 0.j,
                                    -1.10495266e-04 + 0.j, -1.35025940e-04 + 0.j, 8.35708471e-04 + 0.j,
                                    2.60496741e-05 + 0.j, 1.21626869e-02 + 0.j, 1.72514542e-06 + 0.j,
                                    3.01394958e-01 + 0.j, 6.66431180e-08 + 0.j, 5.97293356e+00 - 0.j,
                                    1.70933884e-09 - 0.j, 2.52485755e-01 - 0.j, 3.13271416e-11 - 0.j,
                                    4.10725659e-03 - 0.j],
                                   [-1.24373020e-07 + 0.j, -8.41719700e-07 + 0.j, -3.71957736e-06 + 0.j,
                                    -1.01196878e-05 + 0.j, 3.65217921e-05 + 0.j, 9.26825603e-06 + 0.j,
                                    -4.12053923e-04 + 0.j, 1.00998580e-06 + 0.j, -8.39193226e-03 + 0.j,
                                    5.27076278e-08 + 0.j, -2.69994737e-01 + 0.j, 1.70933884e-09 + 0.j,
                                    -5.98007424e+00 - 0.j, 3.80548502e-11 - 0.j, -2.30123881e-01 - 0.j,
                                    6.18788660e-13 - 0.j],
                                   [2.60676660e-08 + 0.j, -1.76530964e-07 + 0.j, 7.69143445e-07 + 0.j,
                                    -2.45994573e-06 + 0.j, -3.00606983e-06 + 0.j, 1.86052995e-05 + 0.j,
                                    5.79941448e-07 + 0.j, 2.70777248e-04 + 0.j, 3.84067505e-08 + 0.j,
                                    6.71571077e-03 + 0.j, 1.48366948e-09 + 0.j, 2.52485755e-01 + 0.j,
                                    3.80548502e-11 + 0.j, 6.98348162e+00 - 0.j, 6.97433212e-13 - 0.j,
                                    2.17302781e-01 - 0.j],
                                   [-2.27939079e-09 + 0.j, -1.54262406e-08 + 0.j, -6.81688872e-08 + 0.j,
                                    -1.85464043e-07 + 0.j, 6.69336777e-07 + 0.j, 1.69859809e-07 + 0.j,
                                    -7.55173363e-06 + 0.j, 1.85100621e-08 + 0.j, -1.53799479e-04 + 0.j,
                                    9.65975427e-10 + 0.j, -4.95093648e-03 + 0.j, 3.13271416e-11 + 0.j,
                                    -2.30123881e-01 + 0.j, 6.97433212e-13 + 0.j, -6.98726982e+00 - 0.j,
                                    1.13405719e-14 - 0.j],
                                   [4.23871754e-10 + 0.j, -2.87047138e-09 + 0.j, 1.25066119e-08 + 0.j,
                                    -3.99998033e-08 + 0.j, -4.88800223e-08 + 0.j, 3.02530381e-07 + 0.j,
                                    9.43010391e-09 + 0.j, 4.40295756e-06 + 0.j, 6.24510715e-10 + 0.j,
                                    1.09200461e-04 + 0.j, 2.41251206e-11 + 0.j, 4.10725659e-03 + 0.j,
                                    6.18788660e-13 + 0.j, 2.17302781e-01 + 0.j, 1.13405719e-14 + 0.j,
                                    7.98917001e+00 - 0.j]])
    CPB = transmon_initialize()
    calculated_matrix = CPB.matrixelement_table('n_operator', esys=None, evals_count=16)
    assert np.allclose(reference_matrix, calculated_matrix)


def test_CPB_plot_matrixelements():
    CPB = transmon_initialize()
    CPB.plot_matrixelements('n_operator', evals_count=10)


def test_Fluxonium_init():
    fluxonium = fluxonium_initialize()


def test_Fluxonium_eigenvals():
    fluxonium = fluxonium_initialize()
    evals_reference = np.asarray([-3.30851586, -0.23733983, 6.9133453, 10.55323546, 11.76215604, 16.12300682])
    assert np.allclose(evals_reference, fluxonium.eigenvals())


def test_Fluxonium_eigenvecs():
    evecs_reference = np.asarray([-2.38363330e-01 + 0.00000000e+00j,
                                  3.20442405e-02 + 2.12358326e-17j,
                                  -1.20810144e-01 - 6.94724735e-18j,
                                  2.43511103e-01 - 2.22081236e-17j,
                                  -5.33736599e-01 - 8.16472432e-17j,
                                  -6.41746715e-01 - 5.57995514e-17j,
                                  3.73801267e-01 - 8.48983863e-17j,
                                  1.95507133e-02 + 3.54189937e-17j,
                                  3.64412246e-02 + 6.94614516e-17j,
                                  -9.37239709e-02 - 9.86168820e-19j,
                                  -2.49439240e-02 - 1.48055473e-17j,
                                  -2.40320700e-02 - 7.24145879e-18j,
                                  -4.40005619e-02 - 1.39442892e-17j,
                                  9.15447995e-02 - 1.45377466e-17j,
                                  3.36070686e-02 + 6.02277858e-17j,
                                  -7.90008863e-02 + 1.38422304e-18j,
                                  -9.82499289e-03 - 7.21745413e-17j,
                                  4.29790987e-02 - 4.37174562e-18j,
                                  5.02340919e-03 + 2.77125495e-17j,
                                  -1.69072583e-02 + 8.22829425e-18j,
                                  -7.47855900e-03 - 8.30489777e-18j,
                                  5.14627755e-03 - 7.07257661e-18j,
                                  6.31589761e-03 + 3.53006276e-18j,
                                  -1.63773843e-03 + 3.65858940e-18j,
                                  -1.78893677e-03 - 8.22761654e-19j,
                                  7.86514528e-04 - 5.45650780e-19j,
                                  -2.34641271e-03 + 8.49987266e-19j,
                                  -1.64190378e-04 - 1.53769933e-18j,
                                  4.20520055e-03 + 4.98341336e-19j,
                                  -4.94155735e-04 + 3.09908437e-18j,
                                  -4.09698008e-03 - 9.89730901e-19j,
                                  8.53478022e-04 - 1.32909833e-18j,
                                  3.08864466e-03 + 8.33956971e-19j,
                                  -7.93617226e-04 + 1.34060537e-18j,
                                  -2.00265671e-03 - 7.53971558e-19j,
                                  4.80192585e-04 - 1.12248119e-18j,
                                  1.18792898e-03 + 3.65923429e-19j,
                                  -1.50392473e-04 + 7.96299586e-19j,
                                  -6.75558017e-04 - 7.62463010e-20j,
                                  -5.18954042e-05 - 5.43957378e-19j,
                                  3.77450313e-04 - 4.35225590e-20j,
                                  1.06410891e-04 + 2.93405913e-19j,
                                  -2.01906770e-04 + 8.45306996e-20j,
                                  -6.59440591e-05 - 1.84663625e-19j,
                                  9.07422076e-05 - 6.09742126e-20j,
                                  -4.13271229e-06 + 7.03154551e-20j,
                                  -1.64670974e-05 - 4.20795028e-20j,
                                  6.02841937e-05 + 1.76061207e-20j,
                                  -3.13081503e-05 + 7.72755882e-20j,
                                  -8.71127835e-05 - 5.03474206e-20j,
                                  5.70144435e-05 - 1.15019871e-19j,
                                  8.83151315e-05 + 7.70399860e-20j,
                                  -6.47863704e-05 + 8.45305434e-20j,
                                  -7.48488378e-05 - 7.68623425e-20j,
                                  5.98829870e-05 - 7.10660252e-20j,
                                  5.68587268e-05 + 6.51151924e-20j,
                                  -4.79891669e-05 + 2.00533230e-20j,
                                  -4.04922202e-05 - 4.11767962e-20j,
                                  3.40414937e-05 - 2.37191733e-20j,
                                  2.80361101e-05 + 3.04652294e-20j,
                                  -2.14432561e-05 + 2.78940465e-20j,
                                  -1.93840260e-05 - 1.82660275e-20j,
                                  1.18972594e-05 - 1.00573125e-20j,
                                  1.34973104e-05 + 7.40579229e-21j,
                                  -5.71829598e-06 + 6.49363847e-21j,
                                  -9.32153137e-06 - 4.03633810e-21j,
                                  2.36264207e-06 - 6.87490019e-21j,
                                  6.14936276e-06 + 1.41174684e-21j,
                                  -9.44047430e-07 + 5.84360395e-21j,
                                  -3.63247615e-06 - 9.93721596e-22j,
                                  6.04011871e-07 - 3.54594177e-21j,
                                  1.65179056e-06 + 5.89537826e-22j,
                                  -7.02741231e-07 + 1.63137176e-21j,
                                  -1.80385205e-07 - 6.73051333e-22j,
                                  8.62753885e-07 - 2.01870580e-23j,
                                  -8.05110828e-07 + 8.97145728e-22j,
                                  -9.23576589e-07 - 3.70125333e-22j,
                                  1.35986744e-06 - 6.77117007e-22j,
                                  8.63075586e-07 + 8.77830722e-22j,
                                  -1.57014495e-06 + 6.59852252e-22j,
                                  -7.23347908e-07 - 5.75212922e-22j,
                                  1.53658824e-06 - 3.12572026e-22j,
                                  5.59071858e-07 + 1.43932846e-21j,
                                  -1.35587735e-06 + 2.87122900e-22j,
                                  -4.10917984e-07 - 9.77323938e-22j,
                                  1.10787893e-06 - 1.51794202e-22j,
                                  2.98238383e-07 + 7.14243936e-22j,
                                  -8.49996518e-07 + 1.80906527e-23j,
                                  -2.22773464e-07 - 5.75460842e-22j,
                                  6.17423687e-07 - 4.41791722e-23j,
                                  1.76277085e-07 + 4.93180984e-22j,
                                  -4.26981769e-07 + 2.40061779e-23j,
                                  -1.47580079e-07 - 3.19944381e-22j,
                                  2.82390553e-07 - 3.91496868e-23j,
                                  1.27157950e-07 + 2.07451443e-22j,
                                  -1.79446817e-07 + 7.32976594e-23j,
                                  -1.09016440e-07 - 1.52115266e-22j,
                                  1.10230599e-07 - 4.96316487e-23j,
                                  9.06247788e-08 + 1.10145617e-22j,
                                  -6.60378531e-08 + 5.72959714e-23j,
                                  -7.18547754e-08 - 6.61766418e-23j,
                                  3.91076558e-08 - 4.81668258e-23j,
                                  5.36897680e-08 + 4.54130059e-23j,
                                  -2.33709155e-08 + 1.87927971e-23j,
                                  -3.71927308e-08 - 2.66303441e-23j,
                                  1.45530792e-08 + 5.58129156e-24j,
                                  2.29147463e-08 + 1.65631458e-23j,
                                  -9.91703073e-09 - 9.76901988e-24j,
                                  -1.07328309e-08 - 9.89062670e-24j, 7.88622810e-09 + 2.78778104e-24j])
    fluxonium = fluxonium_initialize()
    _, evecs = fluxonium.eigensys(evals_count=6)
    evecs_calculated = evecs.T[5]
    assert np.allclose(evecs_reference, evecs_calculated)


def test_Fluxonium_plot_evals_vs_paramvals():
    fluxonium = fluxonium_initialize()
    fluxonium.cutoff = 50
    flux_list = np.linspace(-0.5, 0.5, 99)
    fluxonium.plot_evals_vs_paramvals('flux', flux_list, evals_count=5, subtract_ground=True)


def test_Fluxonium_plot_wavefunction():
    fluxonium = fluxonium_initialize()
    fluxonium.plot_wavefunction(esys=None, which=(0,1,5), mode='real')


def test_Fluxonium_plot_matrixelements():
    fluxonium = fluxonium_initialize()
    fluxonium.plot_matrixelements('phi_operator', esys=None, evals_count=10)


def SymZeroPi_initialize():
    phitheta_grid = qubit.Grid(
        np.asarray([
            [-6 * np.pi, 6 * np.pi, 100],  # phi variable
            [-np.pi / 2, 3 * np.pi / 2, 40]  # theta variable (2pi periodic!)
        ])
    )
    EJ_CONST = 1 / 3.95
    zero_pi = qubit.SymZeroPi(
        grid=phitheta_grid,
        EJ=EJ_CONST,
        EL=10.0 ** (-2),
        ECJ=1 / (8.0 * EJ_CONST),
        ECS=10.0 ** (-3),
        flux=0.23
    )
    return zero_pi


def test_SymZeroPi_init():
    zero_pi = SymZeroPi_initialize()


def test_SymZeroPi_plot_potential():
    zero_pi = SymZeroPi_initialize()
    zero_pi.plot_potential(contour_vals=np.linspace(0, 5, 25), aspect_ratio=0.12)


def test_SymZeroPi_eigenvals():
    evals_reference = np.asarray([0.46098945, 0.49160704, 0.50316139, 0.52006088, 0.53226832, 0.54625832])
    zero_pi = SymZeroPi_initialize()
    evals_calculated = zero_pi.eigenvals()
    assert np.allclose(evals_reference, evals_calculated)


def test_SymZeroPi_eigenvecs():
    evecs_reference = np.asarray([-3.19457601e-04, -1.06276335e-03, -3.36152135e-03,
                                  -9.73680835e-03, -2.49554679e-02, -5.46659841e-02,
                                  -9.84993493e-02, -1.38942305e-01, -1.40818585e-01,
                                  -7.85224709e-02, 2.76002907e-02, 1.17744551e-01,
                                  1.47030008e-01, 1.21098706e-01, 7.53954631e-02,
                                  3.77524856e-02, 1.58619911e-02, 5.79684529e-03,
                                  1.90673801e-03, 5.84436646e-04, 1.73163349e-04,
                                  5.15859405e-05, 1.61142244e-05, 5.51684531e-06,
                                  2.16773590e-06, 1.02280267e-06, 5.94363670e-07,
                                  4.11749496e-07, 3.08105278e-07, 2.19295788e-07,
                                  1.26090757e-07, 2.95601438e-08, -7.08543979e-08,
                                  -2.00799962e-07, -4.49613430e-07, -1.08986426e-06,
                                  -3.00685417e-06, -9.23389421e-06, -3.02628597e-05,
                                  -1.00824320e-04, -3.17535946e-04, -1.06962171e-03,
                                  -3.41891477e-03, -9.98855202e-03, -2.57802489e-02,
                                  -5.67903216e-02, -1.02777007e-01, -1.45451755e-01,
                                  -1.47744991e-01, -8.24858555e-02, 2.90004878e-02,
                                  1.23627100e-01, 1.54109687e-01, 1.26581803e-01,
                                  7.85087401e-02, 3.91160364e-02, 1.63320881e-02,
                                  5.92250562e-03, 1.92963233e-03, 5.84632378e-04,
                                  1.70799645e-04, 5.00288193e-05, 1.53201626e-05,
                                  5.12769647e-06, 1.96594459e-06, 9.04697944e-07,
                                  5.13807828e-07, 3.49559769e-07, 2.58481776e-07,
                                  1.82869380e-07, 1.04933152e-07, 2.41407346e-08,
                                  -6.15360746e-08, -1.76242941e-07, -4.03049708e-07,
                                  -1.00057538e-06, -2.82534771e-06, -8.85876213e-06,
                                  -2.95444845e-05, -9.97324963e-05, -3.10203354e-04,
                                  -1.04825564e-03, -3.35793081e-03, -9.82417152e-03,
                                  -2.53785462e-02, -5.59364434e-02, -1.01266051e-01,
                                  -1.43342330e-01, -1.45618789e-01, -8.13032063e-02,
                                  2.85849798e-02, 1.21852030e-01, 1.51884636e-01,
                                  1.24735159e-01, 7.73430794e-02, 3.85184974e-02,
                                  1.60712834e-02, 5.82140800e-03, 1.89336501e-03,
                                  5.72089610e-04])
    zero_pi = SymZeroPi_initialize()
    _, evecs = zero_pi.eigensys(evals_count=2)
    evecs_calculated = evecs.T[1][2000:2100]
    if evecs_calculated[0] > 0:
        evecs_calculated *= -1
    assert np.allclose(evecs_calculated, evecs_reference)


def test_SymZeroPi_plot_evals_vs_paramvals():
    zero_pi = SymZeroPi_initialize()
    flux_list = np.linspace(0, 1, 27)
    zero_pi.plot_evals_vs_paramvals('flux', flux_list, subtract_ground=True, yrange=[-0.005, 0.055])


def test_SymZeroPi_plot_wavefunction():
    zero_pi = SymZeroPi_initialize()
    zero_pi.plot_wavefunction(esys=None, which=3, mode='real')


def SymZeroPiNg_initialize():
    phitheta_grid = qubit.Grid(
        np.asarray([
            [-8 * np.pi, 8 * np.pi, 200],  # phi variable
            [-np.pi / 2, 3 * np.pi / 2, 40]  # theta variable (2pi periodic!)
        ])
    )
    EJ_CONST = 1 / 3.95
    zero_pi_ng = qubit.SymZeroPiNg(
        grid=phitheta_grid,
        EJ=EJ_CONST,
        EL=10.0 ** (-3),
        ECJ=1 / (8.0 * EJ_CONST),
        ECS=10.0 ** (-3),
        flux=0.11,
        ng=0.2
    )
    return zero_pi_ng


def test_SymZeroPiNg_init():
    zero_pi = SymZeroPiNg_initialize()


def test_SymZeroPiNg_plot_potential():
    zero_pi = SymZeroPiNg_initialize()
    zero_pi.plot_potential(contour_vals=np.linspace(0, 3, 25), aspect_ratio=0.12)


def test_SymZeroPiNg_eigenvals():
    evals_reference = np.asarray([0.42794314, 0.42883383, 0.45647845, 0.45723624, 0.46916054, 0.47853736])
    zero_pi = SymZeroPiNg_initialize()
    evals_calculated = zero_pi.eigenvals()
    assert np.allclose(evals_reference, evals_calculated)


def test_SymZeroPiNg_eigenvecs():
    evecs_reference = np.array([1.40592322e-05 + 1.57988925e-05j,
                                4.93474848e-06 + 5.92118756e-06j,
                                1.80746612e-06 + 2.35320385e-06j,
                                6.42278003e-07 + 1.02059203e-06j,
                                5.30940322e-08 + 5.00322041e-07j,
                                -5.31144986e-07 + 2.71300615e-07j,
                                -1.42224412e-06 + 1.13952457e-07j,
                                -2.73538648e-06 - 9.22159762e-08j,
                                -4.25174823e-06 - 4.00573949e-07j,
                                -5.39186470e-06 - 7.61521890e-07j,
                                -5.55307189e-06 - 1.02880788e-06j,
                                -4.61165609e-06 - 1.06878799e-06j,
                                -3.03496704e-06 -8.79580322e-07j,
                                -1.45578007e-06 -5.81546994e-07j,
                                -1.92044565e-07 -3.00354479e-07j,
                                8.98957720e-07 -7.50183657e-08j,
                                2.40439442e-06 +1.67838236e-07j,
                                5.66507261e-06 +6.72985124e-07j,
                                1.41145904e-05 +2.16468067e-06j,
                                3.72447127e-05 +6.92799805e-06j,
                                1.01234959e-04 +2.21447877e-05j,
                                2.74892242e-04 +6.92447624e-05j,
                                7.24135112e-04 +2.06794300e-04j,
                                1.80030864e-03 +5.75846414e-04j,
                                4.11737141e-03 +1.46101407e-03j,
                                8.46078940e-03 +3.30488416e-03j,
                                1.52942150e-02 +6.53477380e-03j,
                                2.38810383e-02 +1.11029551e-02j,
                                3.17462296e-02 +1.59905981e-02j,
                                3.55763723e-02 +1.93436059e-02j,
                                3.34611589e-02 +1.95791755e-02j,
                                2.64514586e-02 +1.66139823e-02j,
                                1.77004898e-02 +1.19086177e-02j,
                                1.01495468e-02 +7.30164534e-03j,
                                5.06928189e-03 +3.89413891e-03j,
                                2.24922156e-03 +1.84295271e-03j,
                                9.06548030e-04 +7.91660003e-04j,
                                3.40136120e-04 +3.16396198e-04j,
                                1.21958996e-04 +1.20809032e-04j,
                                4.28474712e-05 +4.51971451e-05j,
                                1.40243204e-05 +1.57596665e-05j,
                                4.93272002e-06 +5.91877390e-06j,
                                1.81055010e-06 +2.35727576e-06j,
                                6.44515433e-07 +1.02429855e-06j,
                                5.31948633e-08 +5.02935934e-07j,
                                -5.34878020e-07 +2.73059482e-07j,
                                -1.43326348e-06 +1.14787219e-07j,
                                -2.75824695e-06 -9.30074382e-08j,
                                -4.28907847e-06 -4.04100653e-07j,
                                -5.44046570e-06 -7.68389648e-07j,
                                -5.60339024e-06 -1.03812906e-06j,
                                -4.65281293e-06 -1.07831965e-06j,
                                -3.06108845e-06 -8.87134226e-07j,
                                -1.46763066e-06 -5.86237411e-07j,
                                -1.93705569e-07 -3.02565365e-07j,
                                9.04040262e-07 -7.55367049e-08j,
                                2.41496088e-06 +1.68536265e-07j,
                                5.68013479e-06 +6.74755940e-07j,
                                1.41223550e-05 +2.16586352e-06j,
                                3.71741927e-05 +6.91487731e-06j,
                                1.00767452e-04 +2.20425211e-05j,
                                2.72819467e-04 +6.87226346e-05j,
                                7.16494631e-04 +2.04612375e-04j,
                                1.77595678e-03 +5.68057232e-04j,
                                4.05010040e-03 +1.43714353e-03j,
                                8.30118239e-03 +3.24253978e-03j,
                                1.49731234e-02 +6.39758069e-03j,
                                2.33404812e-02 +1.08516352e-02j,
                                3.09933465e-02 +1.56113704e-02j,
                                3.47158733e-02 +1.88757349e-02j,
                                3.26571022e-02 +1.91086967e-02j,
                                2.58364826e-02 +1.62277201e-02j,
                                1.73131853e-02 +1.16480452e-02j,
                                9.94670739e-03 +7.15572143e-03j,
                                4.97983798e-03 +3.82542957e-03j,
                                2.21557158e-03 +1.81538081e-03j,
                                8.95622926e-04 +7.82119452e-04j,
                                3.37060479e-04 +3.13535223e-04j,
                                1.21219511e-04 +1.20076521e-04j,
                                4.27066925e-05 +4.50486482e-05j,
                                1.39639268e-05 +1.56917988e-05j,
                                4.90083349e-06 +5.88050452e-06j,
                                1.79473113e-06 +2.33665052e-06j,
                                6.37583876e-07 +1.01319452e-06j,
                                5.26312594e-08 +4.96566738e-07j,
                                -5.27111285e-07 +2.69187887e-07j,
                                -1.41095515e-06 +1.13029359e-07j,
                                -2.71300510e-06 -9.14709324e-08j,
                                -4.21623490e-06 -3.97233293e-07j,
                                -5.34631398e-06 -7.55090639e-07j,
                                -5.50605623e-06 -1.02009660e-06j,
                                -4.57288406e-06 -1.05979832e-06j,
                                -3.00986994e-06 -8.72298420e-07j,
                                -1.44407411e-06 -5.76851995e-07j,
                                -1.90642395e-07 -2.98014024e-07j,
                                8.91992968e-07 -7.44726300e-08j,
                                2.38653549e-06 +1.66575180e-07j,
                                5.62419927e-06 +6.68120556e-07j,
                                1.40141625e-05 +2.14927394e-06j, 3.69782133e-05 +6.87842356e-06j])
    zero_pi = SymZeroPiNg_initialize()
    _, evecs = zero_pi.eigensys(evals_count=2)
    evecs_calculated = evecs.T[1][4000:4100]
    assert np.allclose(evecs_calculated / evecs_calculated[0], evecs_reference / evecs_reference[0])


def test_SymZeroPiNg_plot_evals_vs_paramvals():
    zero_pi = SymZeroPiNg_initialize()
    ng_list = np.linspace(0, 1, 12)
    zero_pi.plot_evals_vs_paramvals('ng', ng_list, subtract_ground=True)


def test_SymZeroPiNg_plot_wavefunction():
    zero_pi = SymZeroPiNg_initialize()
    zero_pi.plot_wavefunction(esys=None, which=4, mode='real')


def hilbertspace_initialize():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.0,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )

    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )

    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )

    # Form a list of all components making up the Hilbert space.
    return qubit.HilbertSpace([CPB1, CPB2, resonator])


def test_HilbertSpace_init():
    hilbertspc = hilbertspace_initialize()


def test_HilbertSpace_diag_hamiltonian():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.0,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )

    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )

    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )

    # Form a list of all components making up the Hilbert space.
    hilbertspc = qubit.HilbertSpace([CPB1, CPB2, resonator])

    # Get resonator Hamiltonian (full product Hilbert space)
    hres = hilbertspc.diag_hamiltonian(resonator)

    # Get diagonalized CPB1 Hamiltonian as full-system operator via tensor product with identities.
    h1 = hilbertspc.diag_hamiltonian(CPB1)

    # Get diagonalized CPB2 Hamiltonian as full-system operator via tensor product with identities.
    h2 = hilbertspc.diag_hamiltonian(CPB2)


def test_HilbertSpace_build_hamiltonian():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.0,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )
    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )
    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )
    # Form a list of all components making up the Hilbert space.
    hilbertspc =  qubit.HilbertSpace([CPB1, CPB2, resonator])
    # Get resonator Hamiltonian (full product Hilbert space)
    hres = hilbertspc.diag_hamiltonian(resonator)
    # Get diagonalized CPB1 Hamiltonian as full-system operator via tensor product with identities.
    h1 = hilbertspc.diag_hamiltonian(CPB1)
    # Get diagonalized CPB2 Hamiltonian as full-system operator via tensor product with identities.
    h2 = hilbertspc.diag_hamiltonian(CPB2)
    g1 = 0.1  # coupling resonator-CPB1 (without charge matrix elements)
    g2 = 0.2  # coupling resonator-CPB2 (without charge matrix elements)
    dim1 = CPB1.truncated_dim
    dim2 = CPB2.truncated_dim
    _, evecs1 = CPB1.eigensys(dim1)
    _, evecs2 = CPB2.eigensys(dim2)
    gmat1 = g1 * qubit.matrixelem_table(CPB1.n_operator(), evecs1)  # coupling constants for CPB1
    gmat2 = g2 * qubit.matrixelem_table(CPB2.n_operator(), evecs2)  # and for CPB2
    hbd = hilbertspc.hubbard_operator
    a = hilbertspc.annihilate(resonator)
    hamiltonian0 = h1 + h2 + hres
    vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])
    vcpb2 = sum([gmat2[j][k] * hbd(j, k, CPB2) for j in range(dim2) for k in range(dim2)])
    hamiltonian1 = (vcpb1 + vcpb2) * (a + a.dag())
    hamiltonian = hamiltonian0 + hamiltonian1


def test_HilbertSpace_diagonalize_hamiltonian():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.0,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )
    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )
    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )
    # Form a list of all components making up the Hilbert space.
    hilbertspc =  qubit.HilbertSpace([CPB1, CPB2, resonator])
    # Get resonator Hamiltonian (full product Hilbert space)
    hres = hilbertspc.diag_hamiltonian(resonator)
    # Get diagonalized CPB1 Hamiltonian as full-system operator via tensor product with identities.
    h1 = hilbertspc.diag_hamiltonian(CPB1)
    # Get diagonalized CPB2 Hamiltonian as full-system operator via tensor product with identities.
    h2 = hilbertspc.diag_hamiltonian(CPB2)
    g1 = 0.1  # coupling resonator-CPB1 (without charge matrix elements)
    g2 = 0.2  # coupling resonator-CPB2 (without charge matrix elements)
    dim1 = CPB1.truncated_dim
    dim2 = CPB2.truncated_dim
    _, evecs1 = CPB1.eigensys(dim1)
    _, evecs2 = CPB2.eigensys(dim2)
    gmat1 = g1 * qubit.matrixelem_table(CPB1.n_operator(), evecs1)  # coupling constants for CPB1
    gmat2 = g2 * qubit.matrixelem_table(CPB2.n_operator(), evecs2)  # and for CPB2
    hbd = hilbertspc.hubbard_operator
    a = hilbertspc.annihilate(resonator)
    hamiltonian0 = h1 + h2 + hres
    vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])
    vcpb2 = sum([gmat2[j][k] * hbd(j, k, CPB2) for j in range(dim2) for k in range(dim2)])
    hamiltonian1 = (vcpb1 + vcpb2) * (a + a.dag())
    hamiltonian = hamiltonian0 + hamiltonian1
    evals_reference = np.asarray([-36.9898613 , -32.2485069 , -31.31250908, -31.00035225,
       -29.18345776, -26.26664068, -25.32975243, -25.01086732,
       -24.44211916, -23.50612209, -23.19649424, -21.58197308,
       -20.28449459, -19.9790977 , -19.34686735, -19.01220621,
       -18.46278662, -17.52590027, -17.2084294 , -16.84047711,
       -15.90462096, -15.54530262, -14.25509299, -13.99415794,
       -13.33019265, -12.48208655, -12.1727023 , -11.54418665,
       -11.25656601, -10.81121745,  -9.87458635,  -9.51009429,
        -8.00925198,  -6.50020557,  -6.19030846,  -5.57523232,
        -4.78354995,  -4.57123207,  -3.84547113,  -3.58389199,
        -2.01787739,  -0.20685665,   1.17306434,   1.46098501,
         2.09778458,   5.73747149,   7.49164636,  13.4096702 ])
    evals_calculated = hamiltonian.eigenenergies()
    assert np.allclose(evals_calculated, evals_reference)


def test_HilbertSpace_get_spectrum_vs_paramvals():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.3,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )
    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )
    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )
    # Form a list of all components making up the Hilbert space.
    hilbertspc =  qubit.HilbertSpace([CPB1, CPB2, resonator])
    # Get resonator Hamiltonian (full product Hilbert space)
    hres = hilbertspc.diag_hamiltonian(resonator)
    # Get diagonalized CPB1 Hamiltonian as full-system operator via tensor product with identities.
    h1 = hilbertspc.diag_hamiltonian(CPB1)
    # Get diagonalized CPB2 Hamiltonian as full-system operator via tensor product with identities.
    h2 = hilbertspc.diag_hamiltonian(CPB2)
    g1 = 0.1  # coupling resonator-CPB1 (without charge matrix elements)
    g2 = 0.2  # coupling resonator-CPB2 (without charge matrix elements)
    dim1 = CPB1.truncated_dim
    dim2 = CPB2.truncated_dim
    _, evecs1 = CPB1.eigensys(dim1)
    _, evecs2 = CPB2.eigensys(dim2)
    gmat1 = g1 * qubit.matrixelem_table(CPB1.n_operator(), evecs1)  # coupling constants for CPB1
    gmat2 = g2 * qubit.matrixelem_table(CPB2.n_operator(), evecs2)  # and for CPB2
    hbd = hilbertspc.hubbard_operator
    a = hilbertspc.annihilate(resonator)

    vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])
    vcpb2 = sum([gmat2[j][k] * hbd(j, k, CPB2) for j in range(dim2) for k in range(dim2)])

    def hamiltonian(flux):
        CPB1.EJ = 40.0 * np.cos(np.pi * flux)
        h1 = hilbertspc.diag_hamiltonian(CPB1)
        vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])

        return (h1 + h2 + hres + (vcpb1 + vcpb2) * (a + a.dag()))

    flux_list = np.linspace(-0.1, 0.6, 100)
    specdata = hilbertspc.get_spectrum_vs_paramvals(hamiltonian, flux_list, evals_count=15, get_eigenstates=True)

    reference_evals = np.array([-35.61671109, -30.87536252, -29.93935539, -29.62839549,
       -27.95521996, -24.89469034, -23.95779031, -23.64010506,
       -23.21389138, -22.27788515, -21.97003287, -20.49827277,
       -18.91372364, -18.6059474 , -17.97609201])
    calculated_evals = specdata.energy_table[2]

    assert np.allclose(reference_evals, calculated_evals)


def test_HilbertSpace_absorption_spectrum():
    CPB1 = qubit.Transmon(
        EJ=40.0,
        EC=0.2,
        ng=0.3,
        ncut=40,
        truncated_dim=3  # after diagonalization, we will keep 3 levels
    )
    CPB2 = qubit.Transmon(
        EJ=3.0,
        EC=1.0,
        ng=0.0,
        ncut=10,
        truncated_dim=4
    )
    resonator = qubit.Oscillator(
        omega=6.0,
        truncated_dim=4  # up to 3 photons (0,1,2,3)
    )
    # Form a list of all components making up the Hilbert space.
    hilbertspc =  qubit.HilbertSpace([CPB1, CPB2, resonator])
    # Get resonator Hamiltonian (full product Hilbert space)
    hres = hilbertspc.diag_hamiltonian(resonator)
    # Get diagonalized CPB1 Hamiltonian as full-system operator via tensor product with identities.
    h1 = hilbertspc.diag_hamiltonian(CPB1)
    # Get diagonalized CPB2 Hamiltonian as full-system operator via tensor product with identities.
    h2 = hilbertspc.diag_hamiltonian(CPB2)
    g1 = 0.1  # coupling resonator-CPB1 (without charge matrix elements)
    g2 = 0.2  # coupling resonator-CPB2 (without charge matrix elements)
    dim1 = CPB1.truncated_dim
    dim2 = CPB2.truncated_dim
    _, evecs1 = CPB1.eigensys(dim1)
    _, evecs2 = CPB2.eigensys(dim2)
    gmat1 = g1 * qubit.matrixelem_table(CPB1.n_operator(), evecs1)  # coupling constants for CPB1
    gmat2 = g2 * qubit.matrixelem_table(CPB2.n_operator(), evecs2)  # and for CPB2
    hbd = hilbertspc.hubbard_operator
    a = hilbertspc.annihilate(resonator)

    vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])
    vcpb2 = sum([gmat2[j][k] * hbd(j, k, CPB2) for j in range(dim2) for k in range(dim2)])

    def hamiltonian(flux):
        CPB1.EJ = 40.0 * np.cos(np.pi * flux)
        h1 = hilbertspc.diag_hamiltonian(CPB1)
        vcpb1 = sum([gmat1[j][k] * hbd(j, k, CPB1) for j in range(dim1) for k in range(dim1)])

        return (h1 + h2 + hres + (vcpb1 + vcpb2) * (a + a.dag()))

    flux_list = np.linspace(-0.1, 0.6, 100)
    specdata = hilbertspc.get_spectrum_vs_paramvals(hamiltonian, flux_list, evals_count=15, get_eigenstates=True)
    absorptiondata = hilbertspc.absorption_spectrum(specdata, ((CPB1, 0), (CPB2, 0), (resonator, 0)),
                                                    initial_as_bare=True)

    reference_energies = np.array([  0.        ,   4.74135306,   5.67735204,   5.9888575 ,
         7.72433769,  10.72256729,  11.6594581 ,  11.97768947,
        12.46567274,  13.40167088,  13.71033926,  15.24394963,
        16.70406082,  17.01076357,  17.64169146])


    calculated_energies = absorptiondata.energy_table[5]

    assert np.allclose(reference_energies, calculated_energies)
